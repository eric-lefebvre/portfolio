/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _SPLIT_H_RPCGEN
#define _SPLIT_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct abonnement {
	int id;
	char nom[40];
	int prix;
};
typedef struct abonnement abonnement;

struct utilisateur {
	int id;
	char nom[40];
	char email[40];
	char adresse[40];
	char motdepasse[40];
	abonnement liste_abo[10];
	int nb_abo;
};
typedef struct utilisateur utilisateur;

struct offre {
	int id;
	abonnement abo;
	float prix_partage;
};
typedef struct offre offre;

struct evaluation {
	int id;
	utilisateur user;
	int note;
	char commentaire[255];
};
typedef struct evaluation evaluation;

struct gestion_abonnement {
	utilisateur user;
	abonnement abo;
};
typedef struct gestion_abonnement gestion_abonnement;

struct partage_abonnement {
	utilisateur user;
	offre partage;
	int co_abonnes[10];
};
typedef struct partage_abonnement partage_abonnement;

struct select_partage {
	utilisateur user;
	partage_abonnement selectionne;
};
typedef struct select_partage select_partage;

struct search {
	char nom[40];
	int prix_max;
};
typedef struct search search;

struct note {
	int id;
	utilisateur user;
	evaluation eval;
};
typedef struct note note;

#define SPLITPROG 0x23456789
#define SPLITVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define INSCRIPTION 1
extern  int * inscription_1(utilisateur *, CLIENT *);
extern  int * inscription_1_svc(utilisateur *, struct svc_req *);
#define DESINSCRIPTION 2
extern  int * desinscription_1(utilisateur *, CLIENT *);
extern  int * desinscription_1_svc(utilisateur *, struct svc_req *);
#define ADD_ABONNEMENT 3
extern  utilisateur * add_abonnement_1(gestion_abonnement *, CLIENT *);
extern  utilisateur * add_abonnement_1_svc(gestion_abonnement *, struct svc_req *);
#define REMOVE_ABONNEMENT 4
extern  utilisateur * remove_abonnement_1(gestion_abonnement *, CLIENT *);
extern  utilisateur * remove_abonnement_1_svc(gestion_abonnement *, struct svc_req *);
#define PROPOSE_PARTAGE_ABONNEMENT 5
extern  int * propose_partage_abonnement_1(partage_abonnement *, CLIENT *);
extern  int * propose_partage_abonnement_1_svc(partage_abonnement *, struct svc_req *);
#define CANCEL_PARTAGE_ABONNEMENT 6
extern  int * cancel_partage_abonnement_1(partage_abonnement *, CLIENT *);
extern  int * cancel_partage_abonnement_1_svc(partage_abonnement *, struct svc_req *);
#define SEARCH_PARTAGE_ABONNEMENT 7
extern  partage_abonnement * search_partage_abonnement_1(search *, CLIENT *);
extern  partage_abonnement * search_partage_abonnement_1_svc(search *, struct svc_req *);
#define SELECT_PARTAGE_ABONNEMENT 8
extern  int * select_partage_abonnement_1(select_partage *, CLIENT *);
extern  int * select_partage_abonnement_1_svc(select_partage *, struct svc_req *);
#define CANCEL_CO_ABONNEMENT 9
extern  int * cancel_co_abonnement_1(select_partage *, CLIENT *);
extern  int * cancel_co_abonnement_1_svc(select_partage *, struct svc_req *);
#define ADD_EVALUATION 10
extern  int * add_evaluation_1(note *, CLIENT *);
extern  int * add_evaluation_1_svc(note *, struct svc_req *);
#define CONNECT_UTILISATEUR 11
extern  int * connect_utilisateur_1(utilisateur *, CLIENT *);
extern  int * connect_utilisateur_1_svc(utilisateur *, struct svc_req *);
#define UPDATE_UTILISATEUR 12
extern  utilisateur * update_utilisateur_1(utilisateur *, CLIENT *);
extern  utilisateur * update_utilisateur_1_svc(utilisateur *, struct svc_req *);
extern int splitprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define INSCRIPTION 1
extern  int * inscription_1();
extern  int * inscription_1_svc();
#define DESINSCRIPTION 2
extern  int * desinscription_1();
extern  int * desinscription_1_svc();
#define ADD_ABONNEMENT 3
extern  utilisateur * add_abonnement_1();
extern  utilisateur * add_abonnement_1_svc();
#define REMOVE_ABONNEMENT 4
extern  utilisateur * remove_abonnement_1();
extern  utilisateur * remove_abonnement_1_svc();
#define PROPOSE_PARTAGE_ABONNEMENT 5
extern  int * propose_partage_abonnement_1();
extern  int * propose_partage_abonnement_1_svc();
#define CANCEL_PARTAGE_ABONNEMENT 6
extern  int * cancel_partage_abonnement_1();
extern  int * cancel_partage_abonnement_1_svc();
#define SEARCH_PARTAGE_ABONNEMENT 7
extern  partage_abonnement * search_partage_abonnement_1();
extern  partage_abonnement * search_partage_abonnement_1_svc();
#define SELECT_PARTAGE_ABONNEMENT 8
extern  int * select_partage_abonnement_1();
extern  int * select_partage_abonnement_1_svc();
#define CANCEL_CO_ABONNEMENT 9
extern  int * cancel_co_abonnement_1();
extern  int * cancel_co_abonnement_1_svc();
#define ADD_EVALUATION 10
extern  int * add_evaluation_1();
extern  int * add_evaluation_1_svc();
#define CONNECT_UTILISATEUR 11
extern  int * connect_utilisateur_1();
extern  int * connect_utilisateur_1_svc();
#define UPDATE_UTILISATEUR 12
extern  utilisateur * update_utilisateur_1();
extern  utilisateur * update_utilisateur_1_svc();
extern int splitprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_abonnement (XDR *, abonnement*);
extern  bool_t xdr_utilisateur (XDR *, utilisateur*);
extern  bool_t xdr_offre (XDR *, offre*);
extern  bool_t xdr_evaluation (XDR *, evaluation*);
extern  bool_t xdr_gestion_abonnement (XDR *, gestion_abonnement*);
extern  bool_t xdr_partage_abonnement (XDR *, partage_abonnement*);
extern  bool_t xdr_select_partage (XDR *, select_partage*);
extern  bool_t xdr_search (XDR *, search*);
extern  bool_t xdr_note (XDR *, note*);

#else /* K&R C */
extern bool_t xdr_abonnement ();
extern bool_t xdr_utilisateur ();
extern bool_t xdr_offre ();
extern bool_t xdr_evaluation ();
extern bool_t xdr_gestion_abonnement ();
extern bool_t xdr_partage_abonnement ();
extern bool_t xdr_select_partage ();
extern bool_t xdr_search ();
extern bool_t xdr_note ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_SPLIT_H_RPCGEN */
